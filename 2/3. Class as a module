C# - строго типизированный язык программирования, что гарантирует многие вещи в использовании класса как модуля.

Для реализации модульности в C# существует классическое наследование: когда один класс наследует другой, он получает все его публичные свойства и методы. 
Язык допускает иерархическое наследование, но всегда не более чем от одного родителя. 
Так, класс C может наследовать класс B, который будет наследовать класс A, но не оба этих класса одновременно.

Также ключевые слова public, private и protected позволяют управлять механизмом повторного использования кода.
Методы и свойства, помеченные словом Public свободно наследуются и используются кодом вне текущего класса.
Private ограничивает использование кода только собственным классом и не позволяет наследовать ничего, помеченного этим словом
Protected совмещает два предыдущих подхода, ограничивая использование кода собственным классом, но позволяя его наследовать.
  
Ключевое слово virtual позволяет задать классу методы, которые позволяется изменить (override) в классе-наследнике. 
Перезаписывать такую реализацию в родительском классе необязательно. Её можно оставить дефолтной

Internal ограничивает использование класса (целиком или только его свойств или методов) одним файлом сборки.
Благодаря этому ключевому слову можно инкапсулировать интерфейс публичных модулей, например, библиотек

С помощью ключевого слова sealed можно ограничить наследование реализованного класса вообще.