Шаг 4:
Bonus и MatrixElement можно выделить как абстрактные классы. От них наследуются уже конкретные реализации бонусов или элементов на поле
StatisticsCounter, MatrixManipulator, Matrix, GameStep - полностью реализованные классы
В процессе реализации бонусов можно будет придумать частично реализованные классы для реализации семейств бонусов, но на первоначальном этапе пока это опустим

MatrixManipulator композиционно расширен классом Matrix
В GameStep композицией содержится класс Bonus
StatisticsCounter содержит список объектов класса GameStep 

Шаг 5:
1. MatrixManipulator 
Команды:
SwitchPlaces: Координаты первой фигуры и второй передаются в качестве параметров. Фигуры по этим координатам должны быть соседними. 
UseBonus: принимает объект типа Bonus и выполняет действия, в зависимости от класса. Даже если бонус ничего не сделает, думаю не стоит делать ограничений. Вычитает количество доступных бонусов у игрока.
ActivateBonus: активирует действие переданного объекта типа Bonus. Отличается от предыдущего метода тем, что вызывается не игроком. 
AddBonus: добавляет бонус игроку. Никаких ограничений, кроме количества. Возможно и это ограничение лишнее.

Запросы:
GetMatrix: вызывает такой же метод у матрицы и возвращает его
GetBonuses: возвращает количество доступных игроку бонусов

2. StatisticsCounter
Команды:
AccountCombination: на вход передаётся количество элементов в комбинации. Из этого вычисляется количество полученных очков
AccountStep: на вход передаётся класс GameStep, в котором расписано всё, что сделал игрок

Запросы:
CountScore: возвращает количество очков игрока
ListSteps: возвращает список всех ходов

3. Matrix
Команды:
SetCoordinates: меняет одно положение элемента в матрице на другое. По указанным координатам должны существовать элементы
GenerateNew: генерирует новый объект класса MatrixElement в случайном месте сверху
Iterate: Проходит по всей матрице в поиске элементов в ряд. Делает это итеративно, пока на поле не останется элементов 3+ в ряд. Здесь же обрабатывается логика исчезания элементов и заполнения пустых мест. Возвращает булево значение, означающее "успокоилась" доска или нет. Если нет - итерация происходит снова 

Запросы:
GetMatrix: Возвращает текущую разметку матрицы
HasPossibleSteps: возвращает булево значение, возможно ли сделать сейчас ход

4. GameStep
Запросы:
GetAction: возвращает ход, сделанный игроком (использование бонуса или смена координат элементов. Потенциально место для нового класса UserAction)
GetMatrix: возвращает состояние матрицы на этот ход

5. Bonus
Запросы:
GetName: возвращает имя бонуса

Эффект от каждого бонуса уже рассчитывается в классе MatrixManipulator

6. MatrixElement
Запросы:
GetName: возвращает имя элемента матрицы

Особенное поведение для каждого наследника этого класса не предусмотрено, но возможно. В любом случае, будут классы для разных элементов матрицы

7. CLI:
Команды:
MakeAction: принимает текст. Это может быть смена координат, использование бонуса или завершение игры. Подтягивает методы других классов в зависимости от ввода игрока
DrawMatrix: рисует для пользователя текущее состояние матрицы (и весь остальной GUI типа очков, номера хода итп) 

Запросы:
SeeStatistics: показывает текущую или окончательную статистику (никакой разницы)