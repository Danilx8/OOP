На этом этапе пересмотрел последние два задания и понял, что перепутал концепции классов проектирования и анализа
Классы анализа я воспринял как те, которые ближе всего взаимодействуют с пользователем
Однако получились именно классы проектирования. Высокоуровневые модули, которые описывают архитектурные решения
Поэтому ниже я приведу копию с 3-го задания + ниже опишу недостающие в системе классы анализа

Классы проектирования:
CLI: класс принимает ввод пользователя, валидирует, после чего передаёт данные дальше.
StatisticsCounter: подписывается на события в игре и считает баллы 
MatrixElementGenerator: класс генерирует псевдослучайный набор новых элементов по запросу
MatrixFieldGenerator: генерирует псевдослучайную матрицу элементов
MatrixManipulator: класс обрабатывающий все запросы на изменение к матрице. Итеративно мониторит позицию элементов в матрице
BonusCaller: класс, который активирует эффекты от бонусов

Классы анализа:
Bonus: абстрактный класс, от которого создаются дальнейшие классы. Инкапсулирует логику действий при вызове + условия зачисления
MatrixElement: тоже абстрактный класс, от него наследуются разные другие элементы матрицы. В нём можно хранить временную информацию типа удалён/не удалён
GameStep: класс, в который по началу можно просто вписывать ходы типа A1:B1, но его стоит выделить для более подробной статистики в перспективе
Matrix: синглтон, в котором хранится информация о текущем состоянии поля
